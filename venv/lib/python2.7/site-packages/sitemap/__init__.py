import os
import types
import gzip
import datetime


class Image(object):
    __slots__ = "url", "caption", "geo_location", "title", "license"

    def __init__(self, url, caption=None, geo_location=None, title=None, license=None):
        self.url = url
        self.caption = caption
        self.geo_location = geo_location
        self.title = title
        self.license = license

    def __str__(self):
        tag = '<image:image><image:loc>%s</image:loc>' % self.url

        if self.caption:
            tag += '<image:caption>%s</image:caption>' % self.caption

        if self.geo_location:
            tag += '<image:geo_location>%s</image:geo_location>' % self.geo_location

        if self.title:
            tag += '<image:title>%s</image:title>' % self.title

        if self.license:
            tag += '<image:title>%s</image:license>' % self.license

        tag += '</image:image>'

        return tag


class Video(object):
    def __init__(self):
        raise NotImplementedError()


class NewsArticle(object):
    def __init__(self):
        raise NotImplementedError()


class Mobile(object):
    def __init__(self):
        raise NotImplementedError()


class Url(object):
    __slots__ = "url", "last_modified", "change_frequency", "priority", "image", "video", "news", "mobile", "_tag"

    def __init__(self, url, last_modified=None, change_frequency=None, priority=None,
                 image=None, video=None, news=None, mobile=None):
        self.url = url
        self.last_modified = last_modified
        self.change_frequency = change_frequency
        self.priority = priority
        self.image = image
        self.video = video
        self.news = news
        self.mobile = mobile
        self._tag = None

    def generate(self):
        tag = "<url><loc>%s</loc>" % self.url

        if self.image:
            tag += str(self.image)
        if self.video:
            tag += str(self.video)
        if self.news:
            tag += str(self.news)
        if self.mobile:
            tag += str(self.mobile)

        if self.last_modified:
            tag += "<lastmod>%s</lastmod>" % self.last_modified
        if self.change_frequency:
            tag += "<changefreq>%s</changefreq>" % self.change_frequency
        if self.priority:
            tag += "<priority>%s</priority>" % self.priority

        tag += "</url>"

        self._tag = tag

        return tag

    @property
    def tag(self):
        return self._tag or self.generate()


class UrlSet(object):
    class LimitExceed(Exception):
        pass

    class MaxBytesExceed(LimitExceed):
        pass

    class MaxUrlsExceed(LimitExceed):
        pass

    def __init__(self, path, name, part=1, max_urls=None, max_bytes=None, compress=True, on_close=None):
        if compress is None:
            compress = True

        self.on_close = on_close
        self.filename = "%s.%s.xml" % (name, part)

        if compress:
            self.filename += ".gz"

        full_filename = os.path.join(path, self.filename)

        self.bytes = 0
        self.urls = 0
        self.max_urls = max_urls or 50000
        self.max_bytes = max_bytes or 50000000
        self.file = gzip.open(full_filename, "wb+") if compress else open(full_filename, "w+")
        self._write('<?xml version="1.0" encoding="UTF-8"?>')
        self._write('<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"')
        self._write(' xmlns:image="http://www.google.com/schemas/sitemap-image/1.1"')
        self._write(' xmlns:video="http://www.google.com/schemas/sitemap-video/1.1"')
        self._write(' xmlns:mobile="http://www.google.com/schemas/sitemap-mobile/1.0"')
        self._write(' xmlns:news="http://www.google.com/schemas/sitemap-news/0.9"')
        self._write('>')

    def _write(self, data):
        self.file.write(data)
        self.bytes += len(data)

    def write_url(self, url):
        tag = url.tag

        if self.bytes + len(tag) + 9 > self.max_bytes:
            raise UrlSet.MaxBytesExceed()

        if self.urls >= self.max_urls:
            raise UrlSet.MaxUrlsExceed()

        self._write(url.tag)
        self.urls += 1

    def close(self):
        self.file.write("</urlset>")
        self.file.close()

        if self.on_close:
            self.on_close(self)


class Sitemap():
    def __init__(self, path, base_url, urlset_path=None, urlset_max_urls=None, urlset_max_bytes=None,
                 urlset_compress=None):
        name = "sitemap"
        self._base_url = base_url.strip("/")
        self._count = 0
        self._current = None
        _today = datetime.date.today().strftime("%Y-%m-%d")

        if urlset_path is None:
            urlset_path = path
        else:
            base_url = os.path.join(base_url, urlset_path)
            urlset_path = os.path.join(path, urlset_path)

        if not os.path.exists(urlset_path):
            os.mkdir(urlset_path, 0755)

        with open(os.path.join(path, "%s.xml" % name), "w+") as sitemap:
            print "{0:<20}{1:>15} bytes {2:>15} urls".format("Filename", "Size in", "Count of")
            print "-" * 62

            sitemap.write('<?xml version="1.0" encoding="UTF-8"?>')
            sitemap.write('<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">')
            try:
                def _complete(url_set):
                    print "{0:<20}{1:>15} bytes {2:>15} urls".format(url_set.filename, url_set.bytes, url_set.urls)
                    url_set_url = os.path.join(base_url, url_set.filename)
                    sitemap.write('<sitemap><loc>%s</loc><lastmod>%s</lastmod></sitemap>' % (url_set_url, _today))

                def _new():
                    if self._current is not None:
                        self._current.close()

                    self._count += 1
                    self._current = UrlSet(urlset_path, name, self._count, urlset_max_urls,
                                           urlset_max_bytes, urlset_compress, _complete)

                _new()

                urls = self.list()
                if isinstance(urls, (list, set, tuple, types.GeneratorType)):
                    try:
                        for url in self.list():
                            if isinstance(url, Url):
                                try:
                                    self._current.write_url(url)
                                except UrlSet.LimitExceed:
                                    _new()
                                    self._current.write_url(url)
                            else:
                                raise ValueError("url")
                    finally:
                        self._current.close()
                else:
                    raise ValueError("Method Sitemap.list must be overwrited and return / yield list of urls")
            finally:
                sitemap.write('</sitemapindex>')

    def list(self):
        raise NotImplementedError()

    def url(self, url, last_modified=None, change_frequency=None, priority=None,
            image=None, video=None, news=None, mobile=None):
        return Url(self._base_url + url, last_modified, change_frequency, priority, image, video, news, mobile)